import streamlit as st
import nest_asyncio
import asyncio
from crewai import Agent, Task, Crew, Process
from crewai_tools import SerperDevTool, ScrapeWebsiteTool
from dotenv import load_dotenv
import os
from langchain_google_genai import ChatGoogleGenerativeAI

# This line allows us to nest async functions in environments like Streamlit
nest_asyncio.apply()

# Load environment variables
load_dotenv()

google_key=st.secrets['GOOGLE_KEY']
# Initialize the LLM (Generative AI model)
llm = ChatGoogleGenerativeAI(
    model="gemini-1.5-flash",
    verbose=True,
    temperature=0.5,
    google_api_key=google_key
)

# Define tools and agents
Serper_key = st.secerets['SERPER_KEY']
os.environ['SERPER_API_KEY'] = Serper_key
search_tool = SerperDevTool()
scrape_tool = ScrapeWebsiteTool()

research_agent = Agent(
    role="Industry Research Analyst",
    goal="Research the company's industry and segment the market in which it operates.",
    backstory="You specialize in investigating industries and companies' strategic focus areas." 
              "Your goal is to gather information on a company’s industry, offerings, and operations.",
    verbose=True,
    allow_delegation=True,
    tools=[scrape_tool, search_tool],  
    llm=llm
)

use_case_agent = Agent(
    role="AI/ML Use Case Specialist",
    goal="Analyze market trends and generate relevant AI and ML use cases for the company.",
    backstory="""You are an expert in AI/ML applications and are tasked with generating innovative use cases 
                 for the company to leverage AI, GenAI, and ML technologies for operational improvements.""",
    verbose=True,
    tools=[scrape_tool, search_tool],
    allow_delegation=True,
    llm=llm
)

asset_collection_agent = Agent(
    role="Resource Asset Collector",
    goal="Search Kaggle for datasets and resources related to the generated AI/ML use cases.",
    backstory="""You are a specialist in collecting datasets, tools, and resources. Your role is to find relevant datasets 
                 from platforms like Kaggle based on the use cases generated by the Use Case Specialist. 
                 You will provide a list of the links of datasets for each proposed use case.""",
    verbose=True,
    tools=[search_tool, scrape_tool],
    allow_delegation=True,
    llm=llm
)

combiner_agent = Agent(
    role="Report Combiner",
    goal="Combine the outputs from the Research Agent, Use Case Specialist, and Asset Collector into a single, organized report.",
    backstory="""You are tasked with compiling and organizing the information gathered by the other agents into a cohesive and structured report.""",
    verbose=True,
    llm=llm,
    allow_delegation=False
)

# Define the tasks
task1 = Task(
    description="Research the following company’s industry and strategic offerings: {company}",
    expected_output="A detailed summary of the company's industry, focus areas, and strategic goals.",
    agent=research_agent,
)

task2 = Task(
    description="Generate 3 relevant AI/ML use cases based on market trends and the company's focus." 
                "The use cases should follow the format provided, with clear objectives, Alignment with Strategic Goals," 
                "and benefits.",
    expected_output="A detailed summary of 3 AI/ML use cases:"
                    "1. Objective/Use Case"
                    "2. Alignment with Strategic Goals"
                    "3. Benefit",
    context=[task1],
    agent=use_case_agent,
)

task3 = Task(
    description="Search platforms like Kaggle ({kaggle_url}) for relevant datasets and resources based on the AI/ML use cases generated by the Use Case Specialist.",
    expected_output="A list of dataset links for each proposed use case",
    context=[task2],
    agent=asset_collection_agent,
)

task4 = Task(
    description="Combine the information from the research, use case generation, and asset collection into a single, structured report.",
    expected_output="""A final report with the following sections:
                      1. Company Overview: Short and concise paragraph about the company's working and key offerings.
                      2. Use Cases (3): Each use case should follow this format:
                         - Objective/Use Case
                         - Alignment with Strategic Goals
                         - Benefit
                      3. Datasets: Kaggle links for each use case.""",
    context=[task1, task2, task3],
    agent=combiner_agent,
)

# Function to run agents and tasks
async def run_crew(company_name, kaggle_url):
    crew = Crew(
        agents=[research_agent, use_case_agent, asset_collection_agent, combiner_agent],
        tasks=[task1, task2, task3, task4],
        verbose=True,
        manager_llm=llm,
        process=Process.sequential
    )

    crew_inputs = {'company': company_name, 'kaggle_url': kaggle_url}
    result = crew.kickoff(inputs=crew_inputs)
    return result

# Streamlit UI
def main():
    st.title("Generative AI Use Case Assistant")

    # Input text box for the company name
    company_name = st.text_input("Enter the company name")

    # Kaggle URL input
    kaggle_url = "https://www.kaggle.com"  # Default value; can be modified to take dynamic input

    # Button to trigger the model and generate report
    if st.button("Generate Report"):
        if company_name:
            # Running the crew asynchronously and displaying the result
            result = asyncio.run(run_crew(company_name, kaggle_url))

            # Display the output in a container
            st.subheader("Generated Output")
            st.write(result)
        else:
            st.write("Please enter a company name.")

if __name__ == "__main__":
    main()
